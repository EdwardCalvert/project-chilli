@page "/upload/word"
@using System
@using System.IO
@using Microsoft.AspNetCore.Hosting
@using Microsoft.Extensions.Logging
@using BlazorServerApp.proccessService
@using BlazorServerApp
@inject IWebHostEnvironment Environment
@inject IRecipeProcessorService recipeProcessorService

<AuthorizeView Roles="Administrator">
    <h3>Upload Word Documents in Bulk.</h3>
    <p>
        <label>
            Upload up to @maxAllowedFiles @(maxAllowedFiles == 1 ? "Word document" : "Word documents (.docx)") to a maximum document size of @(maxFileSize/1000) Kilobytes:
            <InputFile OnChange="@LoadFiles" multiple />
        </label>
    </p>
    @if (isLoading)
    {
        <p>Uploading...</p>
    }
    <FileContentList Result="@resultStructure"></FileContentList>
    @if (recipeProcessorService.FilesAreQueued())
    {
        <p>The bulk upload script will now appear, which will allow you to proof-read every recipe before it is uploaded.</p>
        <a class="btn btn-primary" href="/admin/BulkUpload">Yup, I'm happy, show me the  bulk processor.</a>
    }
    <ErrorNotification Show="@error" ErrorMessage="@errorMessage"></ErrorNotification>
    <h2>Help</h2>
    <p>At the time of writing, the maximum file size is 200KB, which is an attempt to prevent doccumetns with multiple recipes being uploaded in the same document(as the pattern recongition algorithms aren't designed with this in mind). If there is a genuinely valid recipe with this much data, try removing any images, as it seems unlikely that you would be making a recipe at school with  1,600 words (or if you do the maths(200KB-20)/2n = 10000 characters). <br /> <br />By uploading a doccument to this page, you are <b>not</b> actually <em>creating</em> a new recipe yet, rather <b><em>queuing</em></b> it for pattern recognition and you may have to wait  overnight for this to happen.<br /><br />The software also detects if a document has already been uploaded, so uploading a duplicate, but with a different file name also results in an error.  </p>

    <p style="font-size:8px;">Please note: I am not expecting hackers, and so whatever vulnerability you think you have found will almost definately work. If it is your intention to find the limits of this software, why not submitt a pull request with your enhancement on the <a href="https://github.com/EdwardCalvert/prRecipieDatabase/pulls">github page</a></p>

</AuthorizeView>
<AuthorizeView><NotAuthorized><p>Sorry, you will need to login to upload documents. I don't trust you. Yet.</p></NotAuthorized></AuthorizeView>
@code {
    private long maxFileSize { get { return recipeProcessorService.MaximumSingleFileSizeInBytes; } }
    private int maxAllowedFiles { get { return recipeProcessorService.GetCurrentQueueCapacity(); } }
    private bool isLoading;
    private bool error = false;
    private string errorMessage = "";
    private ResultCode resultStructure = new ResultCode();

    private async Task LoadFiles(InputFileChangeEventArgs e)
    {
        isLoading = true;
        resultStructure.Clear();
        bool filesAreSmallEnough = true;
        foreach (var file in e.GetMultipleFiles(maxAllowedFiles))
        {
            Console.WriteLine($"Adding {file.Name}");
            if (file.Size < recipeProcessorService.MaximumSingleFileSizeInBytes)
            {
                if (file.Name.EndsWith(".docx") && file.ContentType == "application/vnd.openxmlformats-officedocument.wordprocessingml.document")
                {
                    resultStructure.AddIBrowserFile(556, file);
                }
                else
                {
                    Console.WriteLine($"INVALID: ");
                    resultStructure.AddIBrowserFile(675, file);
                }
            }
            else
            {
                resultStructure.AddIBrowserFile(302, file);
                filesAreSmallEnough = false;
            }
        }
        if (recipeProcessorService.GetCurrentQueueCapacity() > resultStructure.GetCount(556) && resultStructure.GetCount(556) > 0)
        {
            resultStructure = await recipeProcessorService.QueueBrowserFilesForProcessing(resultStructure);
            error = false;

        }
        else if (!filesAreSmallEnough)
        {
            error = true;
            errorMessage = "The file you attempted to load was too large!";
        }
        else if (recipeProcessorService.GetCurrentQueueCapacity() < resultStructure.GetCount(556))
        {
            error = true;
            errorMessage = $"You attempted to upload more files than we can process at the moment. Current capacity is {recipeProcessorService.GetCurrentQueueCapacity()}";
        }

        else
        {
            error = true;
            errorMessage = "I have no clue what you have done. I guess you must be a hacker? You may need to refresh for the page to work again.";
        }
        isLoading = false;
    }
}