@page "/admin/BulkUpload"
@inject IRecipeProcessorService recipeProcessorService
@inject ITextProcessor textProcessor
@inject IRecipeDataLoader dataLoader
@using BlazorServerApp.proccessService

<AuthorizeView Roles="Administrator">
    <div style="max-width: 100%!important;width: 100%!important;">
        <h3>BulkUploadPage</h3>
        @if (recipeProcessorService.FilesAreQueued())
        {
            @if (undergoingProccessing && recipeModel != null)
            {
                <LoadingElement></LoadingElement>
            }
            else
            {
                <div class="row" style="max-width: 100% !important; width: 100% !important; flex-direction: row; flex-wrap: nowrap; ">
                    <div class="col-8">
                        <RecipeForm RecipeModel="@recipeModel" mode="RecipeForm.MODES.BulkUpload" OnClick="SubmitRecipe" />
                    </div>
                    <div class="co-4" style="margin-left:10px;">
                        @foreach (string line in documentTextPreview.Split("\n"))
                        {
                            <p>@line</p>
                        }
                    </div>
                </div>
            }
            @if (numberOfItemsInitiallyInQueue != 0) //Prevent divide by 0
            {
            <ProgressBar Percent="@(((recipeProcessorService.GetNumberOfItemsInQueue() - numberOfItemsInitiallyInQueue) / numberOfItemsInitiallyInQueue) * 100)"></ProgressBar>
            }
            <btn class="btn btn-danger" @onclick="(()=>DeleteRecipe())">Delete</btn>
            <btn class="btn btn-danger" @onclick="(()=>ClearQueue())">Delete all files queued for processing</btn>
        }
        else
        {
            <p>No recipes are queued for approval. Enjoy your day.</p>
        }
    </div>
    <ErrorNotification ErrorMessage="@errorMessage" Show="@error"></ErrorNotification>
</AuthorizeView>
<AuthorizeView>
    <NotAuthorized>
        <h1>Sorry, you'll have to login in to view this page.</h1>
    </NotAuthorized>
</AuthorizeView>
@code {
    int numberOfItemsInitiallyInQueue;
    string documentTextPreview="";
    string currentMD5Hash;
    bool undergoingProccessing = false;
    bool error = false;
    string errorMessage = "";
    Recipe recipeModel = new();

    private void ClearQueue()
    {
        recipeProcessorService.Clear();
    }

    private async Task SubmitRecipe()
    {
        try
        {
            await recipeProcessorService.InsertRecipeAndFileToDB(recipeModel, currentMD5Hash);
            await FindNextRecipeForProcessing();
            error = false;
        }
        catch(Exception e)
        {
            errorMessage = e.Message;
            error = true;
        }
    }

    protected override async Task OnInitializedAsync()
    {
        try {
            if (numberOfItemsInitiallyInQueue == 0)
            {
                numberOfItemsInitiallyInQueue = recipeProcessorService.GetNumberOfItemsInQueue();
            }
            await FindNextRecipeForProcessing();
        }
        catch(Exception e)
        {
            errorMessage = e.Message + " Click the 'clear queue button' to prevent a deadlock";
            error = true;
        }
    }
    public async Task FindNextRecipeForProcessing()
    {
        if(currentMD5Hash != null)
        {
            recipeProcessorService.Dequeue();
        }
        undergoingProccessing = true;
        this.StateHasChanged();
        ProcessorResult result = await recipeProcessorService.PeekNextRecipe();
        currentMD5Hash = result.MD5;
        documentTextPreview = result.DocumentText;
        recipeModel = result.Recipe;
        await Task.Delay(2);
        undergoingProccessing = false;
        this.StateHasChanged();
    }

    public async void DeleteRecipe()
    {
        try
        {
            await recipeProcessorService.DeleteFile(currentMD5Hash);
            recipeProcessorService.Dequeue();
            await FindNextRecipeForProcessing();
            StateHasChanged();
        }
        catch(Exception e)
        {
            errorMessage = e.Message;
            error = true;
        }
    }
}
