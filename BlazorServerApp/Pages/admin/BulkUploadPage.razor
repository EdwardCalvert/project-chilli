@page "/admin/BulkUpload"
@inject IRecipeProcessorService recipeProcessorService
@inject ITextProcessor textProcessor
@inject IRecipeDataLoader dataLoader
@using BlazorServerApp.proccessService

<AuthorizeView Roles="Administrator">
    <div style="max-width: 100%!important;width: 100%!important;">
        <h3>BulkUploadPage</h3>
        @if (recipeProcessorService.FilesAreQueued())
        {
            @if (undergoingProccessing && recipeModel != null)
            {
                <LoadingElement></LoadingElement>
            }
            else
            {
                <DragDropContainer textBeingDragged="@textBeingDragged" Checkboxes="@Checkboxes">
                <div class="row" style="max-width: 100% !important; width: 100% !important; flex-direction: row; flex-wrap: nowrap; "  >
                    <div class="col-8">

                        <RecipeForm RecipeModel="@recipeModel" mode="RecipeForm.MODES.BulkUpload" OnClick="SubmitRecipe" />
                    </div>
                    <div class="col-4 " >
                        
                        <div style= " top: 0;
    bottom: 0;
    position: fixed;
    overflow-y: scroll;
    overflow-x: hidden;
    margin-left: 10px;" @onkeydown="HandleKeyDown" tabindex="0" @onkeyup="HandleKeyUp" >
                        <ToggleSwitch SetAsChecked="true" ></ToggleSwitch>
                        @foreach (string line in Checkboxes.Keys)
                        {
                                    string displayText = line.Split(LineSeparator)[1];
                                    <p draggable="true" @ondragstart="()=>HandleDragStart(displayText)" > <input type="checkbox" @bind-value="@Checkboxes[line]"></input>@displayText</p>
                        }
                        </div>
                    </div>
                </div>
                </DragDropContainer>
            }
            <btn class="btn btn-danger" @onclick="(()=>DeleteRecipe())">Delete</btn>
            <btn class="btn btn-danger" @onclick="(()=>ClearQueue())">Delete all files queued for processing</btn>
        }
        else
        {
            <p>No recipes are queued for approval. Enjoy your day.</p>
        }
    </div>
    <ErrorNotification ErrorMessage="@errorMessage" Show="@error"></ErrorNotification>
</AuthorizeView>
<AuthorizeView>
    <NotAuthorized>
        <h1>Sorry, you'll have to login in to view this page.</h1>
    </NotAuthorized>
</AuthorizeView>
@code {
    int numberOfItemsInitiallyInQueue;
    string documentTextPreview="";
    string currentMD5Hash;
    bool undergoingProccessing = false;
    bool error = false;
    string errorMessage = "";
    bool replaceText = false;
    string? textBeingDragged;
    Recipe recipeModel = new();
    const string LineSeparator = "$$$$start$$$";

    private ElementReference testRef;
    private bool shiftModifier;


    Dictionary<string, bool> Checkboxes = new Dictionary<string, bool>();

    private void ClearQueue()
    {
        recipeProcessorService.Clear();
    }

    private void HandleDragStart(string line)
    {
        textBeingDragged = line;
    }

    private async Task SubmitRecipe()
    {
        try
        {
            await recipeProcessorService.InsertRecipeAndFileToDB(recipeModel, currentMD5Hash);
            await FindNextRecipeForProcessing();
            error = false;
        }
        catch(Exception e)
        {
            errorMessage = e.Message;
            error = true;
        }
    }

    private void HandleKeyDown(KeyboardEventArgs e)
    {
        if (e.ShiftKey)
        {
            shiftModifier = true;
        }
    }
    private void HandleKeyUp(KeyboardEventArgs e)
    {
        if (e.ShiftKey)
        {
            shiftModifier = false;   
        }
        Console.WriteLine("shift end");
    }

    protected override async Task OnInitializedAsync()
    {
        try {
            if (numberOfItemsInitiallyInQueue == 0)
            {
                numberOfItemsInitiallyInQueue = recipeProcessorService.GetNumberOfItemsInQueue();
            }
            await FindNextRecipeForProcessing();
        }
        catch(Exception e)
        {
            errorMessage = e.Message + " Click the 'clear queue button' to prevent a deadlock";
            error = true;
        }
    }


    public async Task FindNextRecipeForProcessing()
    {
        if(currentMD5Hash != null)
        {
            recipeProcessorService.Dequeue();
        }
        undergoingProccessing = true;
        this.StateHasChanged();
        ProcessorResult result = await recipeProcessorService.PeekNextRecipe();
        currentMD5Hash = result.MD5;
        documentTextPreview = result.DocumentText;
        recipeModel = result.Recipe;
        await Task.Delay(2);
        undergoingProccessing = false;
        this.StateHasChanged();
        TextToCheckboxes();
    }

    public void TextToCheckboxes()
    {
        Checkboxes.Clear(); //Empty any existing contents. 
        foreach(string line in documentTextPreview.Split("\n"))
        {
            if(line.Length >0)
            //Dictionary key must be unique. 
            Checkboxes.Add(Guid.NewGuid().ToString() + LineSeparator + line,false);
        }
    }

    public async void DeleteRecipe()
    {
        try
        {
            await recipeProcessorService.DeleteFile(currentMD5Hash);
            recipeProcessorService.Dequeue();
            await FindNextRecipeForProcessing();
            StateHasChanged();
        }
        catch(Exception e)
        {
            errorMessage = e.Message;
            error = true;
        }
    }
}
