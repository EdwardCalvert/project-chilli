@page "/Recipe/{RecipeIDRequest:long}"
@inject IRecipeDataLoader dataLoader
@inject NavigationManager NavManager
@inject IFileManger fileManager
@using BlazorServerApp.proccessService
@using BlazorServerApp.Extensions
@if (!recipeFound)
{
    <h1>Sorry pal, no recipe found with the ID @RecipeID.</h1>

}
else if (!validIdentifier)
{
    <ErrorNotification ErrorMessage="Sorry, the ID you provided was not recognised as valid!" />
}
else if (model != null)
{
    <h2>@model.RecipeName</h2>
    <h5>@model.MealType</h5>

    if (DownloadPath != null)
    {
        <a href="@DownloadPath" target="=_top" class="btn btn-primary" style="margin:5px;">Download as .Docx</a>
    }
    <AuthorizeView Roles="Administrator">
        <div style="margin: 5px;background-color: rgba(0,0,0,.03);">
            <p>Admin features</p>
            @if (model != null) // THis should  check if there is a document affiliated.
            {
                <div>
                    <a href="/Recipe/@RecipeID/Edit" class="btn btn-primary">Edit Recipe</a>
                    <a @onclick="@(() =>DeleteRecipe())" class="btn btn-danger">⚠ Delete Recipe</a>
                </div>
            }
        </div>
    </AuthorizeView>
    <FoodLabel nutritionLabel="@model.DisplayNutritionModel" StyleParameters="font-size: 12px; overflow-wrap: anywhere;
    width: 100px;" ShowTitle="false" />

    if (model.Servings != 0)
    {
        <p style="margin-bottom:0;">Serves: @model.Servings @(model.Servings == 1? "person" : "people")</p>
    }
    if (model.PreperationTime != 0)
    {
        <p style="margin-bottom:0;">Preparation time: @model.PreperationTime @(model.PreperationTime == 1? "min" :"mins")</p>
    }
    if (model.CookingTime != 0)
    {
        <p style="margin-bottom:0;">Cooking time: @model.CookingTime @(model.CookingTime == 1? "min" : "mins")</p>
    }
    if (model.CookingTime != 0 && model.PreperationTime != 0)
    {
        <p style="margin-bottom:0;">Total time: @(model.PreperationTime + model.CookingTime) mins</p>
    }
    if (model.Difficulty != null)
    {
        <p style="margin-bottom:0;">Difficulty: @model.Difficulty</p>
    }
    <hr />
    <IngredientsTag ingredients="model.Ingredients"></IngredientsTag>
    <div>
        @if (model.Description != null)
        {
            <hr />
            <h3>Description</h3>
            foreach (string line in model.Description.Split("\n"))
            {
                <p style="margin-bottom:0;">@line</p>
            }
        }
        @if (model.Ingredients != null && model.Ingredients.Count > 0)
        {
            <hr />
            @if (DownloadPath != null)
            {
            <h3>Ingredients</h3>
            <p>For best results, <a href="@DownloadPath" target="=_top" class="btn btn-primary" style="margin:5px;">Download as .Docx</a></p>
            }
            <div class="IngredientsList">
                <ul>
                    @foreach (Ingredient ingredient in model.Ingredients)
                    {
                        <li>@ingredient.IngredientName</li>
                    }
                </ul>
            </div>
        }
        @if (model.Equipment != null && model.Equipment.Count() > 0)
        {
            <hr />
            <h3>Equipment</h3>
            <div class="EquipmentList">
                <ul>
                    @foreach (Equipment equipmentModel in model.Equipment)
                    {
                        <li>@equipmentModel.EquipmentName </li>
                    }
                </ul>
            </div>}
        @if (model.Method != null && model.Method.Count > 0)
        {
            <hr />
            <h3>Method</h3>
            <div class="MethodList">
                <ol>
                    @foreach (Method step in model.Method)
                    {
                        <li>@step.MethodText</li>
                    }
                </ol>
            </div>
        }
        <ReviewSectionWithSentiment RecipeID="@RecipeID" />
    </div>

}
else
{
    <LoadingElement />
}

<ErrorNotification Show="@error" ErrorMessage="@($"An unexpected error occured while attemtpting to load recipe: {errorMessage}")"></ErrorNotification>

@code{
    [Parameter]
    public long RecipeIDRequest { get; set; }
    private bool pageRequested = false;
    private bool validIdentifier;
    private uint RecipeID;
    private bool recipeFound = false;
    bool error = false;
    string errorMessage = "";
    string DownloadPath;
    Recipe model;

    private async Task DeleteRecipe()
    {
        FileManagerModel managerModel = await dataLoader.GetFile(RecipeID);
        if (managerModel.FileID != null)
        {
            fileManager.DeleteFile(managerModel.FileID);
            await dataLoader.DeleteOnlyFile(managerModel.FileID);

        }
        await dataLoader.DeleteRecipeAndRelatedValues(RecipeID);
        NavManager.NavigateTo($"/");
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            uint Result;
            validIdentifier = uint.TryParse(RecipeIDRequest.ToString(), out Result);
            if (validIdentifier)
            {
                RecipeID = Result;
                model = await dataLoader.GetRecipeAndTree(RecipeID);


                if (model != null)
                {
                    DownloadPath = await fileManager.GetURL(RecipeID);
                    recipeFound = true;
                    if (!pageRequested)
                    {

                        await dataLoader.IncrementViews(RecipeID);
                        pageRequested = true;
                    }

                }

            }
        }
        catch(Exception e)
        {
            error = true;
            errorMessage = e.Message;
        }
    }
}
