@inject IRecipeDataLoader dataLoader
@if (type != Ingredient.Type.None)
{
    <div class="container-fluid" style="padding-left:0;display: flex; flex-direction: row; align-items: flex-start;">
        <h5>Tags:</h5>
        @foreach (Ingredient.Type flagToCheck in Enum.GetValues(typeof(Ingredient.Type)))
        {
            if (type.HasFlag(flagToCheck) && flagToCheck != Ingredient.Type.None)
            {
                <div style="background-color: rgba(0,0,0,.03); margin-bottom:0;margin-left:5px; border-radius:5px;">@flagToCheck.ToString() <i class="oi oi-tag"> </i></div>
            }
        }

    </div>
}
else
{
<div class="container-fluid" style="padding-left:0;display: flex; flex-direction: row; align-items: flex-start;">
    <h5>Tags:</h5>
    <div style="background-color: rgba(0,0,0,.03); margin-bottom:0;margin-left:5px; border-radius:5px;">No tags found <i class="oi oi-tag"> </i></div>
</div>
}

@code {
    [Parameter]
    public List<Ingredient> ingredients { get; set; }



    Ingredient.Type type;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

            foreach (Ingredient ingredient in ingredients)
            {
                type |= ingredient.TypeOf;

            }


    }

}
